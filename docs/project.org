#+title: The Leagus Project Document
#+options: h:1 num:nil toc:nil

* Overview
The goal of the project is to build a tool for managing and tracking various types of leagues.

* Milestones [9/12]
** DONE store and retrieve a document via the cli
CLOSED: [2024-02-25 Sun 17:55]
** DONE store and retrieve a document via the api
CLOSED: [2024-03-18 Mon 17:43]
** DONE a user can view a list of leagues
** TODO a user can add a new league
** DONE a user can view a list of participants
** DONE a user can add a new participant
CLOSED: [2024-03-30 Sat 12:32]
** DONE a user can view a list of venues
** DONE a user can add a new venue
CLOSED: [2024-03-30 Sat 12:32]
** IN-PROGRESS a user can view details of the active season
*** IN-PROGRESS a user can view the points table for the season
*** IN-PROGRESS a user can view details of the active session
** DONE a user can start a new season
CLOSED: [2024-03-30 Sat 12:39]
** DONE a user can start a new session
CLOSED: [2024-03-30 Sat 12:39]
** TODO a user can start a new round
** TODO a user can manually create matches for a round
** TODO a user can create matches using a match-making algorithm
** TODO a user can submit a result of a match and have it reflected in the points table
Initially the scoring algorithm will be fixed but later on the tool should support other ways of scoring.
* Tasks
** Core [1/2]
*** DONE support async contexts
CLOSED: [2024-03-18 Mon 17:42]
This is needed for the web API as both Actix and Axum use an async runtime which does not work with the synchronous mongodb client.
*** TODO parametrize mongodb connection options
*** TODO implement match making with PTC algorithm
*** TODO implement points scoring with PTC algorithm
** Web [0/4]
*** IN-PROGRESS display the points table for the active season
**** DONE using fake data
CLOSED: [2024-03-27 Wed 14:11]
**** using real data
*** TODO implement manual match creation
*** TODO add logging
*** TODO add more errors and error pages
*** TODO configure the app via env vars and toml config
The mongodb connection string should eventually move out of being hardcoded in the core lib and into configuration.
*** TODO add a global 404 page
Any unknown urls should redirect to the global 404 page.
* Design
** Domain Model
The basic domain model could be as follows.

#+name: Leagus Domain Model
#+attr_latex: scale=0.75
#+label: fig:leagus_domain_model
#+begin_src d2 :file resources/structure.png :tangle resources/structure.d2 :exports results
  league -> season -> session -> round -> match: contains
  league -> participant : includes
  season -> participant : includes
  session -> participant : includes
  round -> participant : includes
  match -> participant : includes
  match -> venue : "hosted at"

  league: {
    shape: sql_table
    id
    name
    seasons
    participants
    }

  season: {
    shape: sql_table
    id
    start date
    end date
    scoring system
    sessions
    participants
  }

  session: {
    shape: sql_table
    id
    rounds
    date
    participants
    }

  round : {
    shape: sql_table
    id
    name/label
    matches
    match making strategy
    participants
  }

  match: {
    shape: sql_table
    id
    score
    venue
    participants
  }

  matchNote -- match

  matchNote: |md
    There could be differnt kinds of matches with differnt ways to score.
  | {
    shape: page
    style.stroke-dash: 5
    style.opacity: 0.9
  }

  participant: {
  shape: sql_table
  id
  name
  }

  venue: {
  shape: sql_table
  id
  name/label
  }
#+end_src

#+attr_html: :width 1200em
#+caption: Leagus Domain Model
#+RESULTS: fig:leagus_domain_model
[[file:resources/structure.png]]

** Components
[[file:resources/Components.svg][Components]]

*** Core
Core is where all the domain logic will be located.
This includes the domain models and functions for interacting with the model as well a the persistence layer for interacting with MongoDB.

*** Web API
The HTTP API through which the functionality will be exposed to web clients. Built with a Rust web framework like Axum or Actix.

*** Web App
The user facing web app. Let's try out SvelteKit + Flowbite-Svelte as the key tech.
